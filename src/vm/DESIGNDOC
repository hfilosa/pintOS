+---------------------------+
|		CS 140		|
| PROJECT 3: VIRTUAL MEMORY	|
|	   DESIGN DOCUMENT	|
+---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Henry Filosa <hfilosa@uchicago>
Andrew Callahan <acallahan@uchicago.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

PAGE TABLE MANAGEMENT
=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// In page.h
struct page /* Virtual page. */
{
  /* Immutable members. */
  void *addr;                 /* User virtual address. */
  bool read_only;             /* Read-only page? */
  struct thread *thread;      /* Owning thread. */

  bool pinned; /* True if in use by kernel, do not evict */
  struct hash_elem hash_elem; /* struct thread `pages' hash element. */

  struct frame *frame;        /* Corresponding frame to page. */

  /* Swap information, protected by frame->frame_lock. */
  block_sector_t sector;       /* Starting sector of swap area, or -1. */

  /* Memory-mapped file information, protected by frame->frame_lock. */
  bool private;               /* False to write back to file, true to write back to swap. */
  struct file *file;          /* File. */
  off_t file_offset;          /* Offset in file. */
  off_t file_bytes;           /* Bytes to read/write, 1...PGSIZE. */
};

// In frame.h
struct frame /* A physical frame. */
{
  struct lock lock;           /* Prevent simultaneous access. */
  void *base;                 /* Kernel virtual base address. */
  struct page *page;          /* Mapped process page, if any. */
};

// Globals in frame.c
static struct frame *frames;  // Frame Table
static size_t frame_cnt;      // Total number of frames
static struct lock scan_lock; // Protect Frame Table
static size_t hand;           // Sweep through Fram Table to find victim frame

// Added to thread struct in thread.h
struct hash pages; /* Hash table of pages held by thread */

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.
Each page contains a reference to the frame that contains its data. If we have a given page we only need to use this
reference. If we want to find the frame by the virtual address we add an additional step.
Each process holds its pages in a hash table where the virtual address is used as the hash input to place pages
within the table. In that case where we are using a virtual address to find a frame, we hash the address to get the page
it corresponds to and then use the page's reference to its frame. If the page does not have a frame mapped to it then the
refrenced value for the frame will be NULL.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
We avoid this issue by not having aliasing. Each frame has only one page corresponding to it at each time, which must come
from the user page.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?
A global lock (scan_lock) is used during the call to allocate a frame to ensure that only one thread at a time may
be accessing and modifying the frame table. This prevents any races.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?
Using a hash table allowed for quick retrieval of a specific page when given a virtual address. Keeping the frame
size small by placing most information in the page structure reduced the size of the global frame array and
made it simpler to switch ownership of a frame.

PAGING TO AND FROM DISK
=======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// Globals in swap.h
static struct block *swap_device; /* The swap device. */
static struct bitmap *swap_bitmap; /* Records which swap pages are in use. */
static struct lock swap_lock; /* Protects the swap_bitmap. */


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
We use the second chance clock algorithm to choose a victim frame. A "hand" sweeps through the array of frames,
stopping and returning the first frame whose page's use bit is set to false. Everytime it encounters a frame whose page's
use bit is set to true, it sets it to false. This guarantees that it will evict the frame it started on if all frames
are in use.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
When P attempts to obtain a frame by eviciting a victim frame that belongs to process Q, the victim frame uses its reference to Q's page structure to set its corresponding page's frame to null and clear the page directory entry to indicate that the frame is not present.
This will result in Q triggering a not present page fault if it needs the data that was previously on that page.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
Our heuristic is to check whether the invalid virtual address is more than 32 bytes away from the user stack pointer at time of faulting.
If it is closer than 32 bytes the stack should be extended into the page that was faulted into. 32 bytes was chosen as that is the most that
may be pushed onto the stack by a single command (the PUSHA instruction). This means that the largest gap between the stack pointer and an invalid virtual address
would result from a PUSHA instruction triggering a page fault. Any faulting virtual address further out than 32 bytes from the current stack pointer must be invalid
as there is no instruction that can attempt to push the stack out that far.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
We take advantage of the three locks scan_lock, frame_lock, and file_lock. In order to change information within the frame table 
the scan lock must be held. To change information within the frame, the frame lock and the scan lock must be held. From this only one thread
at a time can change information about a frame. This ensures that the metadata and data of the frame remain the unchanged by any process that does not possess the frame lock. If a process wishes to ensure that no other process can alter its frame, then it just needs to lock the frame. 
To prevent deadlocks the file lock cannot be held when attempting to allocate a frame. In the event that a memory mapped file is evicted it will attempt to acquire the file lock in order to read the information back into the file. If this is already owned by the previous process it will be blocked. This results in a deadlock as one process possesses the file lock and wants the frame lock of the page and another page that wants the file lock but possess the frame lock. 
To further prevent deadlock beyond this issue we ensure that all frames except for the frame lock are put on and taken off in the same order. This is done by placing the two global locks only over the small C/S they need to protect. The frames more free nature is prevented from dead lock by ensuring that a process will always acquire and free them in the same order, as well as preventing any scenario where they may need another lock that could be owned by antoher thread.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
While a thread attempts to page fault a thread in it will attempt to allocate a free frame that is locked. 
This function frame_alloc_and_lock will attempt to find a free frame and on failure will then evict some victim frame.
To begin this process the global scan_lock must be held. Therefore, only one thread can be in this frame allocation section at a time.
If a timer interrupt did kick P out of the running state in the middle of performing this allocation process and put Q in the running state, even if Q did cause some form of a page fault he would require the scan lock to perform the eviciting operation. Since the scan lock is owned by process P, Q will be put in the blocked state, ensuring that process P can finish the frame allocation process. Process P will only release the scan lock after having obtained the victim frame and locking it. If P was preempted again and Q chose to examine the frame P chose as a possible victim it would be put in the blocked state by the frame's specific lock. Only once P had completed the ownership process would it finally release all locks that Q needs for frame allocation.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
Upon returning a free frame from the allocation process the frame will be locked. This allows the the process P to read in the information that should be in the frame.  If P is kicked out by a timer interrupt or some other mechanism in the middle of this operation and Q is put in the running state it will be put to sleep. To examine a page within eviction context you must possess the frame lock, however this is already possessed by process P, so Q will be put to sleep until process P has finsihed working with the frame. Once finished with the file_system call or the swap call the frame lock will be released allowing process Q to then evict it if necessary.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?
We perform a buffer lock call, which examines all of the virtual pages that make up the buffer and then pages in all of these pages that do not possess a frame and locks the frames associated with them. This ensures that a system call will always have the the necessary memory correctly mapped to a frame and that these frames cannot be altered by any other process while performing the system call.
In the event of an illegal access (an a access to kernel space) we kill the thread immediately.


---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.
Our design falls along the middle of this continuum as we have one global lock for changes to
the frame table such as evicting a frame and individual locks for each frame to protect changes. A fall in our design is that a frame cannot be touched by another frame within evicition context if it is locked by another frame. This will halt the eviction process potentially unnecessarily until the frame they wish to examine has been freed by the owning process.


MEMORY MAPPED FILES
===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
//Added to thread.h

struct mapping /* Binds a mapping id to a region of memory and a file. */
{
  struct list_elem elem;      /* List element. */
  int handle;                 /* Mapping id. */
  struct file *file;          /* File. */
  uint8_t *base;              /* Start of memory mapping. */
  size_t page_cnt;            /* Number of pages mapped. */
};

//Added to struct thread in thread.h
struct list mappings; /* List of memory-mapped files. */

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
Memory mapped files are implemented by allocating sufficient pages to hold the file and setting the file
as their data source and setting their private bit to true. Page out can then recognize the pages as being memory
mapped and write it to its file at the proper offset upon eviction. The only additional overhead is the thread keeping track of the addresses, sizes, and IDs of its existing memory mapped regions.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
First we check whether it conflicts with existing memory mapped regions stored in the threads list of mappings. Then while
allocating pages for its range of virtual addresses we check if a null pointer is returned at any stage by
page_allocate as that indicates a page is already allocated in the page table with that virtual address. Combined these
avoid any overlap with existing segments.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
The implementation is the same for both cases except mmaped pages have their private bit set to true, while exec files
do not. This means the only change in our page code was in page_out where a page with a file reference
and which had this private bit set to true was written to its file and all others were written to swap space.

SURVEY QUESTIONS
================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
